OpenERPObjectInput.TransName=OpenERP Object Input
OpenERPObjectInput.TransDescription=Reads data from OpenERP objects

OpenERPObjectInputDialog.Title=OpenERP Object Input
OpenERPObjectInputDialog.StepName=Step Name
OpenERPObjectInputDialog.ModelName=Model Name
OpenERPObjectInputDialog.ReadBatchSize=Read Batch Size

OpenERPObjectInputDialog.ConnectionTypeErrorTitle=Connection Error
OpenERPObjectInputDialog.ConnectionTypeErrorString=Connection Type Error
OpenERPObjectInputDialog.ConnectionErrorTitle=Connection Error
OpenERPObjectInputDialog.ConnectionErrorString=Connection Error
OpenERPObjectInputDialog.ParseErrorTitle=Parse Error
OpenERPObjectInputDialog.ParseErrorString=Could not parse number {0}
OpenERPObjectInputDialog.MappingErrorTitle=Field Mapping Error
OpenERPObjectInputDialog.MappingErrorString=Could not find source field mapping for field {0}
OpenERPObjectInputDialog.ModelNotFoundError=Could not find model with name {0}

OpenERPObjectInputDialog.LabelSpecifyFields=Specify fields to retrieve:
OpenERPObjectInputDialog.TableViewModelName=Model
OpenERPObjectInputDialog.TableViewFieldName=Field
OpenERPObjectInputDialog.TableViewLabel=Label

OpenERPObjectInputDialog.LabelFilterSpecify=Specify the data filter:
OpenERPObjectInputDialog.TableViewFilterOperator=Operator
OpenERPObjectInputDialog.TableViewFilterField=Field
OpenERPObjectInputDialog.TableViewFilterComparator=Comparator
OpenERPObjectInputDialog.TableViewFilterValue=Value

OpenERPObjectInputDialog.ButtonGetFields=Get Fields
OpenERPObjectInputDialog.ButtonFilterHelp=Filter Help

OpenERPObjectInputDialog.FilterHelp.Title=Filter Help
OpenERPObjectInputDialog.FilterHelp.Text=From the OpenERP 'search' function:\n\n\
***************************************\n\
Each tuple in the search domain needs to have 3 elements, in the form: **('field_name', 'operator', value)**, where: \n\
\n\
	* **field_name** must be a valid name of field of the object model, possibly following many-to-one relationships using dot-notation, e.g 'street' or 'partner_id.country' are valid values.\n\
	* **operator** must be a string with a valid comparison operator from this list: ``=, !=, >, >=, <, <=, like, ilike, in, not in, child_of, parent_left, parent_right``\n\
      The semantics of most of these operators are obvious.\n\
      The ``child_of`` operator will look for records who are children or grand-children of a given record,\n\
      according to the semantics of this model (i.e following the relationship field named by\n\
      ``self._parent_name``, by default ``parent_id``.\n\
    * **value** must be a valid value to compare with the values of **field_name**, depending on its type.\n\
\n\
Domain criteria can be combined using 3 logical operators than can be added between tuples:  '**&**' (logical AND, default), '**|**' (logical OR), '**!**' (logical NOT).\n\
These are **prefix** operators and the arity of the '**&**' and '**|**' operator is 2, while the arity of the '**!**' is just 1. \n\
Be very careful about this when you combine them the first time. \n\
Here is an example of searching for Partners named *ABC* from Belgium and Germany whose language is not english :: \n\
\n\
   [('name','=','ABC'),'!',('language.code','=','en_US'),'|',('country_id.code','=','be'),('country_id.code','=','de')) \n\
\n\
   The '&' is omitted as it is the default, and of course we could have used '!=' for the language, but what this domain really represents is:: \n\
\n\
   (name is 'ABC' AND (language is NOT english) AND (country is Belgium OR Germany))\n\
\n\
****************************************\n\
To search where type is either 'A' or 'B', do: \n\
'OR' 'type' '=' 'A' \n\
' '  'type' '=' 'B' 